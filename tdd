
====TDD===

重要功能，结对编程。（先尝试，看效果）
测试即文档，也需要重构。重构后要运行，回归

TDD： T是你的设计，只不过恰好是一个可执行的UnitTests
合理的设计展现：无二义的，可执行的设计的验收条件。然后你可以说，我有一个设计，或我把设计记录下来了。

＝＝＝TDD一言以概之＝＝＝
编码前的设计，编码完成后的设计验证（设计验证，功能回归验证）

狭义的TDD：单元测试，

    基于UI的测试，这一部分不可能做测试驱动，因为UI总是在最后完成的，不可能提前。
    功能测试，这一部分是关注于系统的业务逻辑，通常是用ATDD和BDD，是集成测试。这一部分保证系统做正确的事情(Do Right Things)。在迭带初期阶段，讨论用户故事的结束条件，用例子来体现，这些例子就形成了自动化的功能测试。
    单元测试，这一部分保证系统的每个单元（类和方法级别）的逻辑正确，更关注于正确地做事情(Do Things Right)。

TDD是从Test开始的，驱动开发过程的动力是失败的测试。
TDD肯定需要有Test，不过Test大部分的时候都不是为了TDD而写的
TDD的Test不是Unit Test，它可以是Acceptance test（ATDD）、Functional test等等

Unit Test: 对函数级别或者OO环境中的类级别的测试，特点就是没有外部依赖。
集成测试：组件之间协作的测试，一般都会验证和用户需求有关的一些行为是否可以完成，也可以验证设计的组件协作是否可以完成。
回归测试：一般是用来验证曾经发现的缺陷。

TDD: 设计,文档,测试

TDD真理：
    TDD中的T描述的是规约，是设计的一部分；
    TDD中的T并不明确要求T对实现代码的覆盖率；
    TDD的T的侧重点是“描述被实现对象应该具有的行为”，而不仅仅是“验证该类的行为是否正确”。
    当然，TDD中的T在形式上是测试，在重构中也可以作为被实现对象的行为验证框架（回归验证）。

TDD实施的前提条件，及难在哪儿？
    使用一种设计方法，1.会做设计 2.做设计
    难在有些项目不做设计,有些人不会做设计

TDD对需求,设计,代码质量的影响?
    引导开发人员做出真正符合需求的东西,不会过渡开发
    设计,TDD能帮你理清思路,但能教会你做好设计.
    代码质量,TDD保证代码有测试覆盖

＝＝＝敏捷核心：＝＝＝
敏捷开发应该生产出什么样的软件系统？
    误解：
    需求方面根据2002年Standish Group的报告，我们软件系统中有65％的功能是客户从来不用或者很少用到的。传统意义上大家认为敏捷开发应该让我们的团队开发得更快，生产率更高
    
    与提高效率相比，使用Scrum，TDD能够帮我们从整个需求中确定真正有用的那35％，而且往往这35％的功能往往实现起来并不是那么困难。因为做得少，所以做得更快。

TDD的好处：
TDD让你减少无用功，迫使你从需求验收的角度入手，你必须在进入细节之前找找需求边界，找到那些验收条件，
TDD会锻炼自顶向下的的抽象分解能力，这对仅习惯从细节入手的程序员来说很有帮助。
    提高代码的可测试性，帮你做到简单设计。

够用的设计：
    在短时间内得到可用的设计与实现。
    “够用的设计”是一个在敏捷环境下非常有效的原则。
    也有些人反对这个原则，认为随意的设计无法随着应用的复杂性增加很好的适应。
    由于需求本身的不确定性，很难期望在一开始的时候就能给出保证能满足将来需求的设计，不如遵循“够用的设计”原则，通过重构来不断修正和优化设计。

实施TDD容易犯的错误：                           
    当你使用一把锤子时，你能犯的最大的错误就是尝试用它把钉子撬出来而不是砸进去。－－熊节
    过度编码，写完测试后，代码不止使新测试通过，还实现了很多别的东西
    不重构，只让测试用例通过。

TDD不足之处：
    太需要实践者坚持
    TDD不是万能的，不是所有的Task都要TDD(如临时性可抛弃代码，技术可行性试验)

设计优略不容易量化，TDD也不能用TestCase的数量去量化，没法量化的实践不应该是强制的，否则会流于形式

套装：TDD+CodeReview+Refactory    
如何学习TDD？
    了解观念
    改变开发习惯
    结对,有经验者指导
    理解在短期可能呈现开发速度更慢的现象
    Story, 迭代增量式开发
    持续集成
    锻炼设计能力:不了解如何做好设计,怎样解耦,TDD会很痛苦
        两项主要能力-->对语言的熟练运用是基础,清晰的MVC设计与模式理解,OOA&OOD与建模能力
    
TDD的学习资料

书：
    Kent Beck的“测试驱动开发”
    Martin Fowler的“重构”
    Bob大叔的“敏捷软件开发原则、模式、实践”和“代码整洁之道”
    Michael Feathers的“修改代码的艺术”
    Gerard Meszaros的“XUnit模式”
    Roy Osherove的“The Art of Test Driven Development”
    Steve Freeman的“Growing Object Oriented Software Guided by Tests”
    Eric Evans的“领域驱动设计”等。

视频

    到Google去查Kata
    James Shore的“Let’s Play TDD”系列

一般的开发工程师可以在1-2周内掌握TDD工作方式，但一般需要更长时间来达到对TDD的熟练掌握和灵活应用。 －－段念


TDD整理:
TDD概念及名字
    Test-Driven Development(中心词:开发),一种由单元测试驱动的开发方式(准确说,设计方式)
    提问: 你理解的TDD是什么?
TDD不是什么?
    单元测试,
TDD是什么?
    设计,文档(接口及代码使用规范),测试(设计验证,功能回归)
为什么要考虑TDD?TDD有什么好处?
    因为我们在用Agile, 敏捷是什么?
如何进行TDD?
    CodeReview+Refactory+TDD套装
    代码实例:
    应用场景: 狗吃肉

TDD的实施难点在哪里?
TDD有哪些不足?
    太需要实践者坚持
    TDD不是万能的，不是所有的Task都要TDD(如临时性可抛弃代码，技术可行性试验)

Summary:



====code review
http://jupiter-eclipse-plugin.googlecode.com/svn/trunk/site/  ---install plugin

====tests目录下运行测试用例:
img: run-tests-folder.png
将tests成为一个目录,testcase如何运行? 如下:
包结构:
    lershare/
        |--activity/
        |       |-- __init__.py
        |       |-- models.py    
        |       |-- tests/
        |            |--__init__.py       <----from lershare.activity.tests.activity_basic import *     
        |            |--activity_basic.py
        |            |--activity_pro.py   
        |       
        |            
        |--profiles/
        |
        |--__init__.py    

==run testcase:
    utest activity.ActivityProTest
    utest activity



