
敏捷软件测试更多的是一种理念，而非过程。 ??

问题：
    敏捷开发的过程中遇到种种问题：要么是忽略了代码质量，导致在频繁的迭代过程中，每一个迭代的问题层出不穷；或是沿用原有的方法安排对系统的系统测试，导致测试团队疲于奔命，却总也赶不上开发所要求的进度。

与传统的测试不同，敏捷软件测试并不是一个独立的过程

敏捷开发中的一个迭代周期：
    在迭代周期开始的时候，团队与客户一起定义本迭代周期内需要完成的功能；
    团队建立验收测试验证标准；
    开发工程师开始实现新功能，使用TDD为产品建立安全网，使用持续集成尽可能保证每一次代码提交不引入新的缺陷；
    所有新功能被添加后，在RC上运行回归测试保证原有功能的正确性；针对新功能运行测试保证新功能的正确性；
    执行验收测试验证系统是否达到可交付的标准。

＝＝＝＝自动化测试 
根据调查，“不合适的自动化测试目标”与“从自动化测试中无法获得收益”是项目失败的主要原因。
希望把自动化测试定义为“完全替代手工操作”、期望仅仅“在UI层建立自动化测试”都不是合适的自动化测试目标；
尤其是“在UI层建立自动化测试”这个目标一定会带来无法从自动化测试中获得收益的后果。

UI自动化测试的高昂的投入往往是组织不能持续进行自动化测试原因。
UI自动化测试带来痛苦的主要根源在于UI本身的不稳定性。
由于UI是应用与用户的直接交互界面，用户的大量需求都直接对应在UI本身的改变上，这就导致了UI本身的不稳定，
建立在UI上的自动化测试也因此不稳定。当然，除了不稳定外，UI自动化测试带来的测试环境的需求也是导致UI自动化
测试开销剧增的原因之一；另外，UI自动化测试本身并不能很好的帮助定位缺陷，对开发工程师而言，其在反馈上的价值远不如单元测试。

＝＝＝＝＝
敏捷测试要求“交付可用产品”而非单纯的“发现缺陷”。
In other words, the emphasis is shifted from "testers
as quality police" to something more like "entire
project team working toward demonstrable quality."

敏捷测试核心价值观
    共享质量目标
    在产品中内建可测试性
    关注“可交付产品”，而非关注发现缺陷

敏捷测试中测试工程师可以做什么？
    获取和明确用户的质量期望
    建立合适的系统测试、用户验收测试质量标准
    建立可见的质量度量体系,让产品和代码质量反馈持续可见
    推进单元测试、开发测试,促进代码质量
    建立持续构建框架
    建立与维护合适的自动化测试以减少测试的时间投入

测试工程师面临的挑战
    必须通过与开发团队的密切合作获取产品信息,制定测试计划而不是依赖文档
    必须密切介入开发过程,参与设计,甚至是代码
    必须能够自我驱动
    必须具有足够的自动化测试技能与探索性测试技能

测试工程师需改变的工作方式
    与开发工程师密切合作
    转变角色,测试工程师不再是“裁判”,而应该是“支持者”和“帮助产品具有更好质量的角色”
    将测试推动到上游
    自我驱动,积极参与敏捷过程,主动工作而非仅仅被动接受任务
    提升自己的技能,尤其是自动化测试方面的技能、探索性测试能力、快速学习能力


测试团队面临的挑战
    与传统测试不同的人员技能要求
    与传统测试不同的考核标准
    与传统测试不同的测试过程管理
    与传统测试不同的团队管理方式

计划一个迭代周期内的测试
    计划的内容
        产品发布标准(验收测试准则)
        需要在本迭代周期内测试的内容
        需要安排的测试类型
        需要使用的测试环境(包括数据)

    测试计划
        一页纸测试计划
        可以使用各种形式表达测试计划:在线文档,测试点列表,自动测试列表,白板或是电子表格

    了解本次迭代的产品细节
        有哪些新增加的功能?
        开发工程师为相应的功能建立了哪些测试?
        需要增加哪些验收测试?
        应用的哪些部分可以通过自动化测试覆盖?
        应用的哪些部分需要通过手工测试覆盖?


    确定测试范围
        哪些部分应该被纳入回归测试内?
        哪些部分需要新增加自动化测试?
        哪些部分需要新增加手工测试?


敏捷测试中的自动化测试工具
单元测试与模块测试
 xUnit工具
 Mock工具

HTTP/HTML层面测试工具
 HttpUnit
 WebDriver(HtmlUnit)

UI层面的测试工具
 Selenium/Webdriver
 Watir/WatiN

性能测试工具
 JMeter
持续集成工具
安全性测试工具
其他测试工具
 Link Checker
 Crawler
 Fuzz测试工具


































