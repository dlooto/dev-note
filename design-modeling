
=========Design and Modeling

Model:
An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.

WYSIWYG


class ItemSold(models.Model):
    name = models.CharField(max_length = 100)
    value = models.PositiveIntegerField()
    ...
    #Audit field
    created_on = models.DateTimeField(auto_now_add = True)
    updated_on = models.DateTimeField(auto_now = True)

====ForeignKey
To create a recursive relationship -- an object that has a many-to-one relationship with itself -- use models.ForeignKey('self').

====OneToOneField
概念上类似于ForeignKey, 但关联关系的另一端将仅返回一个单一对象
常用场景: 作为某已有model的扩展属性(model)的主键.
接受所有ForeignKey参数, 加一个额外的: parent_link(用于继承关系中)

====Model inheritance(模型继承关系)====

Django中的3种模型继承关系
1.Abstract Base Classes     --父模型类不持久化到DB, 仅持有基础信息(供子类继承)
2.Multi-table inheritance   --父模型与子模型都持久化到DB
3.Proxy models              --仅为扩展父模型的行为(添加方法), 不添加新的字段 User --> MyUser

==Abstract Base Classes(抽象基类)
class CommonInfo(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField()

    class Meta:
        abstract = True    ##基类不会创建DB表

class Student(CommonInfo):
    home_group = models.CharField(max_length=5)  #若未声明Meta内部类的abstract=True属性, 子类默认为具体类

The Student model will have three fields: name, age and home_group. 
The CommonInfo model cannot be used as a normal Django model, since it is an abstract base class. 
It does not generate a database table or have a manager, and cannot be instantiated or saved directly.

基类中可添加方法, 但仅可以操作自己已定义的方法. 
    CommonInfo.objects.get(id=1) 是不允许的

==Multi-table inheritance (多表继承)
    class Place(models.Model):
        name = models.CharField(max_length=50)
        address = models.CharField(max_length=80)

    class Restaurant(Place):
        serves_hot_dogs = models.BooleanField()
        serves_pizza = models.BooleanField()

    >>> Place.objects.filter(name="Bob's Cafe")
    >>> Restaurant.objects.filter(name="Bob's Cafe")

    父类中的所有字段在子类中也是有效的, 而字段数据将存放于不同的DB表.
     ---->这其实是指如下表结构： 
            Place:
                id
                name
                address
            Restaurant:         ---子表仅存储其特有的字段，及对父类对象的引用(id)
                place_ptr_id
                serves_hot_dogs
                serves_pizza      

    >>> p = Place.objects.get(id=12)  --若该id查询出其实是一个子类对象,则可以对该父类引用进行转换, 以使用其子类版本.强制转换的方法:  父类对象直接引用子类对象,如p.restaurant (restaurant为模型名小写, 源自Django官方文档)
    # If p is a Restaurant object, this will give the child class:
    >>> p.restaurant
    <Restaurant: ...>

   子类无权访问父类的Meta类。
但是仍然有例外情况：若子类没有在Meta类中指定排序属性或get_latest_by属性，子类将从父类继承.
多表继承自动地（隐式地）使用了O2O来连接子类与父类：
    OneToOneField（parent_link=True）

class Supplier(Place):
    # Must specify related_name on all relations.
    customers = models.ManyToManyField(Restaurant, related_name='provider')
   －－－此子类必须指定related_name，否则将与默认的（隐式的）O2O关系冲突

＝＝＝＝Proxy Models(代理模型)
Proxy model必须继承自非抽象类(若要实现其应用的功能的话),且只能是单一继承（不能同时继承多个非抽象类）.
Proxy model对象的所有行为(CRUD等操作)与父类对象都在同一张表上.

class MyPerson(Person):
     class Meta:
        proxy = True

     def do_something(self):   ----与Person在同一个DB表上操作
            ...

但可以继承多个抽象模型类（且这些抽象模型类没有定义任何的字段属性）－－－其实这相当于Java里实现接口的概念.
Proxy models将从其非抽象父类继承所有Meta选项
若Proxy未指定manager，它将直接继承父类的。若定义了，则新的manager将作为默认，父类里的manager仍然有效。
若proxy要重新定义manager且不想改变默认（继承自父类）的，则可以

多表继承中，子类不继承父类的managers属性

Meta.managed与Meta.proxy区别：
1. 若需要已存在的模型或DB表的一份镜像(视图)，使用Meta.managed=False.
  这样模型只是一个DB表视图，Django将不会持久化它。
 
2.若为改变一个原有模型的行为(修改或增加方法)，且保持与原模型一致的字段属性，则使用
   Meta.proxy=True


Django中子类可以继承多个父类，若多个父类都有Meta内部类，则仅第一个父类的Meta被使用.
其他父类的将被忽略。
Python语言中，子类可以覆盖父类的任何属性。但在Django中，Field实例类型的属性不允许被重写（至少目前）。


尝试用  Manager‘s latest() and earliest() methods.
    get_latest_by ＝ 'order_date'

what is managed=False?
managed=False,将不会执行DB表的创建与删除操作, 和一般的python无明显区别.

from django.contrib.auth.models import User
class MyUser(User):
    class Meta:
        proxy = True

    def do_something(self):
        ...

上面MyUser与父类User操作同一张DB表.In particular, any new instances of User will also be accessible through MyUser, and vice-versa:


>>> u = User.objects.create(username="foobar")
>>> MyUser.objects.get(username="foobar")
<MyUser: foobar>

======Tips:
若要给User添加额外的方法, 则delegation优先于proxy = True方式.因: 若User对象已提供,
则MyUser的得到需要利用user.id重查DB.委托则不存在该问题(虽然会多一行构建委托对象的代码).
且若MyUser proxy User,则(User)myUser强制转换的结果 myUser.id == user


file:///home/junn/Documents/python-django-help/django-docs-1.4-en/topics/db/models.html#model-inheritance


====扩展User (这并非好的扩展方式,违反了OCP)
class UserFunctions:
    def get_shortcut(self):
        return "user#" + self.id
    ...
User.__bases__ += (UserFunctions,)

u = User.objects.get(id=3)
u.get_shortcut()


====多表继承实例
class Member(Profile):
    base = models.OneToOneField(Profile, parent_link=True)   --修改默认base指针引用名
    school = models.CharField(max_length=40)

    class Meta:
        db_table = 'test_member'

====
row-level: methods in model    --model内方法属于行级操作 
table-level:methods in manager  --manager内方法属于表级操作(即同model内多行记录处理)
table/table:                    --表间操作方法也放于manager


====Django性能优化 
通过使用django.db.models.Field.db_index 来给一个Django模型类的字段加索引，设置这个属性字段的Field.db_index=True
    注：django对model中的fk和unique = True的字段将自动创建索引

QuerySet的工作机制
1）QuerySet是lazy加载的；
2）QuerySet只有在需要的时候才会被执行；
3）QuerySet执行后，其结果是保存在内存中的。

QuerySet的缓存机制
    QuerySet对调用方法是不执行缓存的。比如下面的两端代码，其中一个会被缓存，另一个不会：
    >>> entry = Entry.objects.get（id=1）
    >>> entry.blog                      # Blog对象会被从数据库查询出来
    >>> entry.blog                      # 第二次访问的缓存对象，不会再次执行DB查询

    但是对于调用的查询方法，是不会被缓存的：
    >>> entry = Entry.objects.get（id=1）
    >>> entry.authors.all（）             # 第一次会执行查询
    >>> entry.authors.all（）             # 第二次会再执行一次查询

将查询计算操作放在数据库中完成，不要在Python代码中完成。  --这样防止更多次地直接访问DB
    1）使用filter,exclude完成查询过滤；
    2） F（）查询表达式；
    3） 使用聚合函数来完成数据库聚合操作。

使用QuerySet.extra（）明确的指出要查询的字段
使用原生SQL查询：对于复杂的数据库查询操作，使用原生SQL实现
尽量一次查询出所有需要的信息
理解 QuerySet.select_related（）方法，并尽量使用它。

只查询需要的数据
    1）某些情况下，只使用 QuerySet.values（）和 values_list（）方法，查询出符合条件的结果集而不是完整的对象结果集；
    2）某些情况下，只使用 QuerySet.defer（） 和 only（）过滤数据。

如果只是查询集合的数量，使用QuerySet.count（）函数，而不是len（QuerySet）
如果想知道某个记录是否包含在某个结果集中，使用 QuerySet.exists（）函数

对于批量更新和删除操作使用 QuerySet.update（） 和 QuerySet.delete（）

如果需要查询对象的外键，则使用外键字段而不是使用关联的对象的主键，比如：
    >>>entry.blog_id #应该使用这种方式
    >>>entry.blog.id #不要使用这种方式

====mysql优化
mysql连接有个优化原则，小表连大表。

mysql多表连接:
1. 笛卡尔积(交叉连接) 在MySQL中可以为CROSS JOIN或者省略CROSS即JOIN，或者使用','  如： 
SELECT * FROM table1 CROSS JOIN table2   
SELECT * FROM table1 JOIN table2   
SELECT * FROM table1,table2  

 由于其返回的结果为被连接的两个数据表的乘积，因此当有WHERE, ON或USING条件的时候一般不建议使用，因为当数据表项目太多的时候，会非常慢。一般使用LEFT [OUTER] JOIN或者RIGHT [OUTER] JOIN

2.   内连接INNER JOIN
在MySQL中把INNER JOIN叫做等值连接，即需要指定等值连接条件在MySQL中CROSS和INNER JOIN被划分在一起。 join_table: table_reference [INNER | CROSS] JOIN table_factor [join_condition]

3. MySQL中的外连接
分为左外连接和右连接，即除了返回符合连接条件的结果之外，还要返回左表(左连接)或者右表(右连接)中不符合连接条件的结果，相对应的使用NULL对应。

http://blog.csdn.net/hguisu/article/details/5731880   ---多表连接列子
Tips:
1. on a.c1 = b.c1 等同于 using(c1)
2. INNER JOIN 和 , (逗号) 在语义上是等同的
3. 当 MySQL 在从一个表中检索信息时，你可以提示它选择了哪一个索引。
如果 EXPLAIN 显示 MySQL 使用了可能的索引列表中错误的索引，这个特性将是很有用的。
通过指定 USE INDEX (key_list)，你可以告诉 MySQL 使用可能的索引中最合适的一个索引在表中查找记录行。
可选的二选一句法 IGNORE INDEX (key_list) 可被用于告诉 MySQL 不使用特定的索引。如：

class PollManager(models.Manager):
    def with_counts(self):
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("""
            SELECT p.id, p.question, p.poll_date, COUNT(*)
            FROM polls_opinionpoll p, polls_response r
            WHERE p.id = r.poll_id
            GROUP BY 1, 2, 3
            ORDER BY 3 DESC""")
        result_list = []
        for row in cursor.fetchall():
            p = self.model(id=row[0], question=row[1], poll_date=row[2])
            p.num_responses = row[3]
            result_list.append(p)
        return result_list

















